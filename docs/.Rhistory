ggtitle("Número de accidentes por clase") +
geom_bar(color = "black", fill = "#EDBBA8")
ggplot(data = df %>% filter(!clase %in% c("Incendio", "Choque y Atropello")),
aes(x = reorder(clase, clase,
function(x)-length(x)))) +
theme_minimal(base_size = 12.5) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(size=9),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
labs(x = "Clase", y = "Número de accidentes") +
ggtitle("Número de accidentes por clase") +
geom_bar(color = "black", fill = "#EDBBA8")
ggplot(data = df,
aes(x = reorder(diseno, diseno,
function(x)-length(x)))) +
theme_minimal(base_size = 12.5) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(size=9),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
labs(x = "Clase", y = "Número de accidentes") +
ggtitle("Número de accidentes por clase") +
geom_bar(color = "black", fill = "#EDBBA8")
ggplot(data = df,
aes(x = reorder(diseno, diseno,
function(x)-length(x)))[1:4]) +
theme_minimal(base_size = 12.5) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(size=9),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
labs(x = "Clase", y = "Número de accidentes") +
ggtitle("Número de accidentes por clase") +
geom_bar(color = "black", fill = "#EDBBA8")
ggplot(data = df,
aes(x = reorder(diseno, diseno,
function(x)-length(x))[1:4])) +
theme_minimal(base_size = 12.5) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(size=9),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
labs(x = "Clase", y = "Número de accidentes") +
ggtitle("Número de accidentes por clase") +
geom_bar(color = "black", fill = "#EDBBA8")
ggplot(data = df,
aes(x = reorder(diseno, diseno,
function(x)-length(x))) +
theme_minimal(base_size = 12.5) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(size=9),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
labs(x = "Clase", y = "Número de accidentes") +
ggtitle("Número de accidentes por clase") +
geom_bar(color = "black", fill = "#EDBBA8")
ggplot(data = df,
aes(x = reorder(diseno, diseno,
function(x)-length(x)))) +
theme_minimal(base_size = 12.5) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(size=9),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
labs(x = "Clase", y = "Número de accidentes") +
ggtitle("Número de accidentes por clase") +
geom_bar(color = "black", fill = "#EDBBA8")
sum2 <- df %>%
group_by(diseno) %>%
summarise(Total = n())
View(sum2)
ggplot(data = sum2,
aes(x = diseno, y = Total)) +
theme_minimal(base_size = 12.5) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(size=9),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
labs(x = "Clase", y = "Número de accidentes") +
ggtitle("Número de accidentes por clase") +
geom_bar(stat = "identity", color = "black", fill = "#EDBBA8")
sum2[order(sum2$Total)]
sum2[order(sum2$Total),]
sum2[order(sum2$Total, decreasing = T),]
sum2[order(sum2$Total, decreasing = T)[1:4],]
sum4 <- sum2[order(sum2$Total, decreasing = T)[1:4],]
View(sum4)
sum2 <- sum2[order(sum2$Total, decreasing = T)[1:4],]
ggplot(data = sum2,
aes(x = diseno, y = Total)) +
theme_minimal(base_size = 12.5) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(size=9),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
labs(x = "Clase", y = "Número de accidentes") +
ggtitle("Número de accidentes por clase") +
geom_bar(stat = "identity", color = "black", fill = "#EDBBA8")
sum2$diseno[order(sum2$Total), decreasing = T]
sum2$diseno[order(sum2$Total), decreasing = T]
sum2$diseno[order(sum2$Total, decreasing = T)]
ggplot(data = sum2,
aes(x = diseno[order(Total, decreasing = T)], y = Total[order(Total, decreasing = T)])) +
theme_minimal(base_size = 12.5) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(size=9),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
labs(x = "Clase", y = "Número de accidentes") +
ggtitle("Número de accidentes por clase") +
geom_bar(stat = "identity", color = "black", fill = "#EDBBA8")
ggplot(data = sum2,
aes(x = diseno[order(Total, decreasing = T)], y = Total[order(Total, decreasing = T)])) +
theme_minimal(base_size = 12.5) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(size=9),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
labs(x = "Clase", y = "Número de accidentes") +
ggtitle("Número de accidentes por clase") +
geom_bar(stat = "identity", color = "black", fill = "#EDBBA8")
library(forcats)
ggplot(data = sum2 %>% mutate(diseno = fct_reorder(diseno, Total)),
aes(x = diseno, y = Total)) +
theme_minimal(base_size = 12.5) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(size=9),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
labs(x = "Clase", y = "Número de accidentes") +
ggtitle("Número de accidentes por clase") +
geom_bar(stat = "identity", color = "black", fill = "#EDBBA8")
ggplot(data = sum2 %>% mutate(diseno = fct_reorder(diseno, desc(Total))),
aes(x = diseno, y = Total)) +
theme_minimal(base_size = 12.5) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(size=9),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
labs(x = "Clase", y = "Número de accidentes") +
ggtitle("Número de accidentes por clase") +
geom_bar(stat = "identity", color = "black", fill = "#EDBBA8")
ggplot(data = sum2 %>% mutate(diseno = fct_reorder(diseno, desc(Total))),
aes(x = diseno, y = Total)) +
theme_minimal(base_size = 12.5) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(size=9),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
labs(x = "Clase", y = "Número de accidentes") +
ggtitle("Número de accidentes por clase") +
geom_bar(stat = "identity", color = "black", fill = "#EDBBA8", alpha=.6, width=.4)
ggplot(data = sum2 %>% mutate(diseno = fct_reorder(diseno, desc(Total))),
aes(x = diseno, y = Total)) +
theme_minimal(base_size = 12.5) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(size=9),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
labs(x = "Clase", y = "Número de accidentes") +
ggtitle("Número de accidentes por clase") +
geom_bar(stat = "identity", color = "black", fill = "#EDBBA8", width=.6)
ggplot(data = sum2 %>% mutate(diseno = fct_reorder(diseno, desc(Total))),
aes(x = diseno, y = Total)) +
theme_minimal(base_size = 12.5) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(size=9),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
labs(x = "Clase", y = "Número de accidentes") +
ggtitle("Número de accidentes por clase") +
geom_bar(stat = "identity", color = "black", fill = "#EDBBA8")
ggplot(data = sum2 %>% mutate(diseno = fct_reorder(diseno, desc(Total))),
aes(x = diseno, y = Total)) +
theme_minimal(base_size = 12.5) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(size=9),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
labs(x = "Clase", y = "Número de accidentes") +
ggtitle("Número de accidentes por clase") +
geom_bar(stat = "identity", color = "black", fill = "#EDBBA8", width=.6)
ggplot(data = df %>% filter(!clase %in% c("Incendio", "Choque y Atropello")),
aes(x = reorder(clase, clase,
function(x)-length(x)))) +
theme_minimal(base_size = 12.5) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(size=9),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
labs(x = "Clase", y = "Número de accidentes") +
ggtitle("Número de accidentes por clase") +
geom_bar(color = "black", fill = "#EDBBA8", width=.6)
ggplot(data = sum2 %>% mutate(diseno = fct_reorder(diseno, desc(Total))),
aes(x = diseno, y = Total)) +
theme_minimal(base_size = 12.5) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(size=9),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
labs(x = "Diseño de vía", y = "Número de accidentes") +
ggtitle("Número de accidentes por diseño de vía") +
geom_bar(stat = "identity", color = "black", fill = "#D7F4FA", width=.6)
ggplot(data = sum2 %>% mutate(diseno = fct_reorder(diseno, desc(Total))),
aes(x = diseno, y = Total)) +
theme_minimal(base_size = 12.5) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(size=9),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
labs(x = "Diseño de vía", y = "Número de accidentes") +
ggtitle("Número de accidentes por diseño de vía") +
geom_bar(stat = "identity", color = "black", fill = "#D7F4FA", width=.6) +
scale_y_continuous(labels = format_format(scientific = FALSE))
ggplot(data = sum2 %>% mutate(diseno = fct_reorder(diseno, desc(Total))),
aes(x = diseno, y = Total)) +
theme_minimal(base_size = 12.5) +
theme(plot.title = element_text(hjust = 0.5),
legend.title = element_text(size=9),
panel.border = element_rect(colour = "black", fill=NA, size=1)) +
labs(x = "Diseño de vía", y = "Número de accidentes") +
ggtitle("Número de accidentes por diseño de vía") +
geom_bar(stat = "identity", color = "black", fill = "#D7F4FA", width=.6)
library(lubridate)
try <- df %>%
mutate(mes = month(fecha))
View(try)
sapply(try, class)
try <- df %>%
mutate(mes = as.factor(month(fecha)))
View(try)
library(plyr)
library(scales)
library(zoo)
```{r include=FALSE}
library(dplyr)
library(ggplot2)
library(forcats)
library(lubridate)
library(scales)
library(zoo)
try <- df %>%
mutate(mes = as.factor(month(fecha)),
)
try <- df %>%
mutate(mes = as.factor(month(fecha)),
ano_mes = as.factor(as.yearmon(fecha)),
)
View(try)
try <- df %>%
mutate(mes = as.factor(month(fecha)),
ano_mes = as.factor(as.yearmon(fecha)),
semana = week(fecha),
)
try <- df %>%
mutate(mes = as.factor(month(fecha)),
ano_mes = as.factor(as.yearmon(fecha)),
semana = week(fecha),
)
df <- ddply(df,.(ano_mes), transform, mes_semana=1+semana-min(semana))  # compute week number of month
df <- df %>%
mutate(mes = as.factor(month(fecha)),
ano_mes = as.factor(as.yearmon(fecha)),
semana = week(fecha)
)
df <- ddply(df,.(ano_mes), transform, mes_semana=1+semana-min(semana))  # compute week number of month
View(df)
df <- df %>%
mutate(mes = as.factor(month(fecha)),
ano_mes = as.factor(as.yearmon(fecha)),
semana = week(fecha),
semana_dia = wday(fecha),
)
View(df)
df <- df %>%
mutate(mes = as.factor(month(fecha)),
ano_mes = as.factor(as.yearmon(fecha)),
semana = week(fecha),
semana_dia = as.factor(wday(fecha)),
)
df <- ddply(df,.(ano_mes), transform, mes_semana=1+semana-min(semana))  # compute week number of month
df_dates <- df %>% group_by(fecha)
View(df_dates)
dir()
df_dates <- read.csv("Accidentalidad_por_fechas_v2.csv")
View(df)
df_dates <- df %>%
mutate(mes = as.factor(month(fecha)),
ano_mes = as.factor(as.yearmon(fecha)),
semana = week(fecha),
semana_dia = as.factor(wday(fecha)),
)
df_dates <- read.csv("Accidentalidad_por_fechas_v2.csv")
df_dates <- df_dates %>%
mutate(mes = as.factor(month(fecha)),
ano_mes = as.factor(as.yearmon(fecha)),
semana = week(fecha),
semana_dia = as.factor(wday(fecha)),
)
df_dates <- read.csv("Accidentalidad_por_fechas_v2.csv")
df_dates <- df_dates %>%
mutate(mes = as.factor(month(fecha)),
ano_mes = as.factor(as.yearmon(fecha)),
semana = week(fecha),
semana_dia = as.factor(wday(fecha)),
)
df_dates <- ddply(df_dates,.(ano_mes), transform, mes_semana=1+semana-min(semana))  # compute week number of month
df_dates <- df_dates %>%
mutate(mes = as.factor(month(fecha)),
ano_mes = as.factor(as.yearmon(fecha)),
semana = week(fecha),
semana_dia = as.factor(wday(fecha)),
ano = year(fecha),
)
df_dates <- read.csv("Accidentalidad_por_fechas_v2.csv")
df_dates <- df_dates %>%
mutate(mes = as.factor(month(fecha)),
ano_mes = as.factor(as.yearmon(fecha)),
semana = week(fecha),
semana_dia = as.factor(wday(fecha)),
ano = year(fecha),
)
df_dates <- ddply(df_dates,.(ano_mes), transform, mes_semana=1+semana-min(semana))  # compute week number of month
df_dates <- df_dates %>%
mutate(mes = as.factor(month(fecha)),
ano_mes = as.factor(as.yearmon(fecha)),
semana = week(fecha),
semana_dia = as.factor(wday(fecha)),
ano = year(fecha),
mes = month(fecha)
)
ggplot(df_dates, aes(mes_semana, semana_dia, fill = Total)) +
geom_tile(colour = "white") +
facet_grid(ano~mes) +
scale_fill_gradient(low="green", high="red") +
labs(x="Week of Month",
y="",
title = "Time-Series Calendar Heatmap",
subtitle="Yahoo Closing Price",
fill="Close")
ggplot(df_dates, aes(mes_semana, semana_dia, fill = total)) +
geom_tile(colour = "white") +
facet_grid(ano~mes) +
scale_fill_gradient(low="green", high="red") +
labs(x="Week of Month",
y="",
title = "Time-Series Calendar Heatmap",
subtitle="Yahoo Closing Price",
fill="Close")
ggplot(df_dates, aes(mes_semana, semana_dia, fill = total)) +
geom_tile(colour = "white") +
facet_grid(ano~mes) +
scale_fill_gradient(low="green", high="red") +
labs(x="Semana del mes",
y="",
title = "Visualización del total de accidentes por fecha",
subtitle="Yahoo Closing Price",
fill="Close")
ggplot(df_dates, aes(mes_semana, semana_dia, fill = total)) +
geom_tile(colour = "white") +
facet_grid(ano~mes) +
scale_fill_gradient(low="green", high="red") +
labs(x="Semana del mes",
y="",
title = "Visualización del total de accidentes por fecha",
subtitle="Yahoo Closing Price",
fill="Close")
library(plyr)
library(dplyr)
library(ggplot2)
library(forcats)
library(lubridate)
library(scales)
library(zoo)
library(plyr)
df_dates <- read.csv("Accidentalidad_por_fechas_v2.csv")
df_dates <- df_dates %>%
mutate(mes = as.factor(month(fecha)),
ano_mes = as.factor(as.yearmon(fecha)),
semana = week(fecha),
semana_dia = as.factor(wday(fecha, label = TRUE)),
ano = year(fecha),
mes = month(fecha, label = TRUE)
)
library(plyr)
df_dates <- ddply(df_dates,.(ano_mes), transform, mes_semana=1+semana-min(semana))  # compute week number of month
ggplot(df_dates, aes(mes_semana, semana_dia, fill = total)) +
geom_tile(colour = "white") +
facet_grid(ano~mes) +
scale_fill_gradient(low="green", high="red") +
labs(x="Semana del mes",
y="",
title = "Visualización del total de accidentes por fecha",
fill="Total de accidentes")
ggplot(df_dates, aes(mes_semana, semana_dia, fill = total)) +
geom_tile(colour = "white") +
facet_grid(ano~mes) +
scale_fill_gradient(low="green", high="red") +
labs(x="Semana del mes",
y="",
title = "Visualización del total de accidentes por fecha",
fill="Total de accidentes")
ggplot(df_dates, aes(mes_semana, semana_dia, fill = total)) +
geom_tile(colour = "white") +
facet_grid(ano~mes) +
scale_fill_gradient(low="green", high="red") +
labs(x="Semana del mes",
y="",
title = "Visualización del total de accidentes por fecha",
fill="Total de accidentes")
ggplot(df_dates, aes(mes_semana, semana_dia, fill = total)) +
geom_tile(colour = "white") +
facet_grid(ano~mes) +
scale_fill_gradient(low="green", high="red") +
labs(x="Semana del mes",
y="",
title = "Visualización del total de accidentes por fecha",
fill="Total de accidentes")
ggplot(df_dates, aes(mes_semana, semana_dia, fill = total)) +
geom_tile(colour = "white") +
facet_grid(ano~mes) +
scale_fill_gradient(low="green", high="red") +
labs(x="Semana del mes",
y="",
title = "Visualización del total de accidentes por fecha",
fill="Total de accidentes")
ggplot(df_dates, aes(mes_semana, semana_dia, fill = total)) +
geom_tile(colour = "white") +
facet_grid(ano~mes) +
scale_fill_gradient(low="green", high="red") +
labs(x="Semana del mes",
y="",
title = "Visualización del total de accidentes por fecha",
fill="Total de accidentes")
View(df)
week(as.Date("31/12/2018"))
week(as.Date("27/12/2018"))
weekdays(as.Date("27/12/2018"), label = T)
weekday(as.Date("27/12/2018"), label = T)
weekday(as.Date("27/12/2018"))
weekdays(as.Date("27/12/2018"))
library(lubridate)    # Manejo de las fechas
library(dplyr)        # Manejo BD
df <- read.csv("Accidentalidad_Medellin.csv")
# Lectura BD días festivos
df_fest <- read.csv("festivos.csv")
# Cambio del tipo de dato de la columna FECHA (carácter -> fecha)
df_fest$FECHA <- as.Date(df_fest$FECHA, "%Y-%m-%d")
# Tomamos exclusivamente la columna donde están contenidas las fechas de festivos
df_fest <- df_fest[ , 2]
# Verificación
class(df_fest)
# Modificación en la BD de datos
df <- df %>%
mutate(fecha = as.Date(fecha, "%Y-%m-%d"),
festivo = ifelse(fecha %in% df_fest, 1, 0),
semana = week(fecha))
# Total de accidentes en días no festivos (1) y días comúnes (0)
table(df$festivo)
sapply(df, class)
# Este código cambia el tipo de dato de la columna
# Vector con columnas a cambiar su tipo de dato
cols <- c("clase", "gravedad", "barrio",
"comuna", "diseno", "dia_nombre")
df[cols] <- lapply(df[cols], as.factor)
# Verificación
sapply(df, class)
View(df)
library(dplyr)
library(lubridate)
library(MASS)
library(ggplot2)
library(rpart)
library(nnet)
library(gamlss)
library(gamlss.add)
MSE <- function(X, Y){
MSE <- mean((X - Y)^2)
return(MSE)
}
var_MSE <- function(x, y){
var_por <- (x - y)/max(x, y)
return(100 * abs(var_por))
}
library(dplyr)
library(lubridate)
library(MASS)
library(ggplot2)
MSE <- function(X, Y){
MSE <- mean((X - Y)^2)
return(MSE)
}
var_MSE <- function(x, y){
var_por <- (x - y)/max(x, y)
return(100 * abs(var_por))
}
# Entrenamiento
path_train <- "Accidentalidad_por_fechas_v2.csv"
train <- read.csv(path_train)
# Validación
path_test <- "Accidentalidad_por_fechas_Validacion_v2.csv"
test <- read.csv(path_test)
# Función para cambiar los tipos de datos
cambio_tipo_datos <- function(df){
# Vector con columnas a cambiar su tipo de dato
cols <- c("mes",
"mes_dia",
"y_dia",
"semana","semana_dia",
"festivo",
"especial",
"fes_antes",
"fes_despues",
"celebracion")
# Operaciones
df[cols] <- lapply(df[cols], as.factor)
df$fecha <- as.Date(df$fecha, "%Y-%m-%d")
df
}
# Aplicamos la función creada
test <- cambio_tipo_datos(test)
train <- cambio_tipo_datos(train)
# Verificación
sapply(test, class)
sapply(train, class)
mod_full_choque <- lm(choque ~ mes + mes_dia + y_dia + semana + semana_dia +
festivo + especial + fes_antes + fes_despues +
celebracion,
data = train)
stepAIC(mod_full_choque, direction = "backward")
